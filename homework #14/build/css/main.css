@charset "UTF-8";/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */pre,textarea{overflow:auto}:focus,a:active,a:hover{outline:0}#header .logo a,.btn,a:focus,a:hover{text-decoration:none}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;box-sizing:border-box}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}abbr[title]{border-bottom:1px dotted}b,optgroup,strong{font-weight:700}dfn{font-style:italic}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.btn,img,textarea{vertical-align:top}sup{top:-.5em}sub{bottom:-.25em}img{border:0;max-width:100%;height:auto}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible;border:none}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver}legend{border:0;padding:0}textarea{resize:vertical}#wrapper,.ellipsis,.nav-opener{overflow:hidden}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}.clearfix:after{content:'';display:block;clear:both}.hidden{display:none}.text-center{text-align:center}.text-left{text-align:left}.text-right{text-align:right}.pull-left{float:left!important}.pull-right{float:right!important}.ellipsis{white-space:nowrap;text-overflow:ellipsis}*,:after,:before{box-sizing:inherit}*{max-height:1000000px}body{margin:0;color:#333;background:#fff;font:16px/1.2 Poppins,"Port Lligat Sans",Arial,"Helvetica Neue",Helvetica,sans-serif;min-width:320px;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.gm-style img{max-width:none}.h,.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:700;margin:0;color:inherit}.h1,.h2,h1,h2{font-size:70px}.h3,h3{font-size:24px}.h4,h4{font-size:21px}.h5,h5{font-size:17px}.h6,h6{font-size:15px}p{font-size:30px}a{background-color:transparent;color:#39f}fieldset,form{margin:0;padding:0;border-style:none}input[type=text],input[type=tel],input[type=email],input[type=search],input[type=password],textarea{-webkit-appearance:none;-webkit-border-radius:0;box-sizing:border-box;border:1px solid #999;padding:.4em .7em}input[type=text]:focus,input[type=tel]:focus,input[type=email]:focus,input[type=search]:focus,input[type=password]:focus,textarea:focus{border-color:#333}input[type=text]::-webkit-input-placeholder,input[type=tel]::-webkit-input-placeholder,input[type=email]::-webkit-input-placeholder,input[type=search]::-webkit-input-placeholder,input[type=password]::-webkit-input-placeholder,textarea::-webkit-input-placeholder{color:#999}input[type=text]::-moz-placeholder,input[type=tel]::-moz-placeholder,input[type=email]::-moz-placeholder,input[type=search]::-moz-placeholder,input[type=password]::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#999}input[type=text]:-moz-placeholder,input[type=tel]:-moz-placeholder,input[type=email]:-moz-placeholder,input[type=search]:-moz-placeholder,input[type=password]:-moz-placeholder,textarea:-moz-placeholder{color:#999}input[type=text]:-ms-input-placeholder,input[type=tel]:-ms-input-placeholder,input[type=email]:-ms-input-placeholder,input[type=search]:-ms-input-placeholder,input[type=password]:-ms-input-placeholder,textarea:-ms-input-placeholder{color:#999}input[type=text].placeholder,input[type=tel].placeholder,input[type=email].placeholder,input[type=search].placeholder,input[type=password].placeholder,textarea.placeholder{color:#999}select{-webkit-border-radius:0}button,input[type=button],input[type=reset],input[type=file],input[type=submit]{-webkit-appearance:none;-webkit-border-radius:0;cursor:pointer}.second-section{margin:0 0 150px}.second-section h2{font-weight:800;font-size:70px;line-height:1.5;text-align:center;color:#1c2323}@media (max-width:1399px){.second-section h2{font-size:50px;color:#1c2323;margin:0 0 20px}}.second-section p{max-width:510px;text-align:center;margin:0 auto 71px}.second-section .fake-vid{display:flex;flex-wrap:wrap}.second-section .img-holder{position:relative;width:66%;height:350px;overflow:hidden;z-index:1}@media (max-width:1023px){.second-section h2{font-size:40px;line-height:1.2}.second-section .fake-vid{flex-direction:column-reverse}.second-section .img-holder{width:100%}}.second-section .img-holder .play-bg{position:absolute;bottom:40px;right:0;-webkit-transform:translateX(50%);transform:translateX(50%);width:128px;height:128px;border-radius:50%;background:rgba(255,255,255,.4)}@media (max-width:1023px){.second-section .img-holder .play-bg{bottom:50%;left:50%;-webkit-transform:translate(-50%,50%);transform:translate(-50%,50%)}}.second-section .img-holder .play-bg .icon-play{text-align:center;line-height:1.8;border-radius:50%;-webkit-transform:translate(14px,14px);transform:translate(14px,14px);font-size:55px;color:#fec62d;display:inline-block;background:#fff;width:78%;height:78%;z-index:1}.second-section .img-holder iframe{height:100%;width:100%;-o-object-fit:cover;object-fit:cover}.second-section .right-side{width:34%;background:#ccf0e6;padding:70px 6.9% 70px 7.2%}@media (max-width:1399px){.second-section p{margin:0 auto 40px}.second-section .right-side{padding:50px 6%}}.second-section .right-side p{text-align:left;font-weight:500;font-size:20px;line-height:1.5;color:#486958;margin:0 0 41px}@media (max-width:1399px){.second-section .right-side p{font-size:18px;line-height:1.3}.fifth-sectiom h2{font-size:50px;color:#1c2323}}.fifth-sectiom{margin:0 0 240px}.fifth-sectiom h2{text-align:center;line-height:1.5;-webkit-columns:#1c2323;columns:#1c2323;margin:0 0 20px}@media (max-width:1023px){.second-section .right-side{width:100%}.fifth-sectiom h2{font-size:40px;line-height:1.2;color:#1c2323}}.fifth-sectiom .img-row{display:flex;flex-wrap:wrap;align-items:center;padding:0 12.2%;margin:0 -15px;justify-content:space-between}.fifth-sectiom .logo-holder{max-width:326px;max-height:239px;padding:0 15px}.fifth-sectiom .logo-holder img{width:100%}.fifth-sectiom .two-columns{display:flex;flex-wrap:wrap}.fifth-sectiom .img-holder{flex:0 1 38.15%}.fifth-sectiom .img-holder img{height:100%;-o-object-fit:cover;object-fit:cover}.fifth-sectiom .left-side{width:61.85%;background:#ccf0e6;padding:50px 100px 50px 135px;z-index:1}@media (max-width:1399px){.fifth-sectiom .img-holder{display:none}.fifth-sectiom .left-side{width:100%}}.fifth-sectiom .achievments-row{display:flex;flex-wrap:wrap;justify-content:space-between;margin:0 0 120px}.fifth-sectiom .achievement{display:inline-block;align-items:flex-start;font-weight:800;font-size:70px;line-height:.8;color:#58a9a5;width:33%;min-width:140px}@media (max-width:1399px){.fifth-sectiom .achievments-row{margin:0 0 60px}.fifth-sectiom .achievement{font-size:50px;line-height:.8}}.fifth-sectiom .achievement span{font-size:28px}@media (max-width:1399px){.fifth-sectiom .achievement span{font-size:20px;line-height:.8}}.fifth-sectiom .q-holder{margin:0 0 60px;position:relative}.fifth-sectiom .q-holder::before{content:"â€œ";position:absolute;top:-100px;left:-58px;font-family:"Port Lligat Sans";font-weight:400;font-size:300px;line-height:321px;color:#fff;z-index:-1}.fifth-sectiom blockquote{margin:0;font-weight:500;font-size:25px;line-height:38px;color:#486958;z-index:2}.fifth-sectiom .author{color:#58a9a5;font-style:italic;font-size:24px}.last-section .container{display:flex;flex-wrap:wrap;padding:0 0 330px}.last-section .left-side{width:32%;padding:0 104px 0 0}.last-section h2{font-weight:800;font-size:70px;line-height:1.5;text-align:center}@media (max-width:1399px){.last-section h2{font-size:50px}}@media (max-width:1023px){.last-section .container{display:block}.last-section .left-side{width:100%}.last-section h2{font-size:40px;line-height:1.3}.last-section p{text-align:center}}.last-section .form-item input,.last-section .form-item textarea,.last-section p{line-height:38px;color:#486958;font-weight:500}.last-section p{font-size:25px}@media (max-width:1399px){.last-section p{font-size:20px}}.last-section .right-side{width:68%;border:1px solid #486958;padding:35px 55px}.last-section .form-item{width:100%;border-bottom:1px solid #486958;margin:0 0 30px}.last-section .form-item:nth-child(3){border:none}.last-section .form-item input{width:100%;border:none;height:88px;font-size:25px}@media (max-width:1023px){.last-section .right-side{width:100%}.last-section .form-item input{height:60px;font-size:20px}}.last-section .form-item input::-webkit-input-placeholder{font-weight:500;font-size:25px;color:#486958}.last-section .form-item input:-ms-input-placeholder{font-weight:500;font-size:25px;color:#486958}.last-section .form-item input::-ms-input-placeholder{font-weight:500;font-size:25px;color:#486958}.last-section .form-item input::placeholder{font-weight:500;font-size:25px;color:#486958}@media (max-width:1023px){.last-section .form-item input::-webkit-input-placeholder{font-size:20px}.last-section .form-item input:-ms-input-placeholder{font-size:20px}.last-section .form-item input::-ms-input-placeholder{font-size:20px}.last-section .form-item input::placeholder{font-size:20px}}.last-section .form-item textarea{width:100%;border:none;height:88px;font-size:25px;padding:15px;resize:none}@media (max-width:1023px){.last-section .form-item textarea{font-size:20px}}.last-section .form-item textarea::-webkit-input-placeholder{font-weight:500;font-size:25px;color:#486958;padding:10px 0}.last-section .form-item textarea:-ms-input-placeholder{font-weight:500;font-size:25px;color:#486958;padding:10px 0}.last-section .form-item textarea::-ms-input-placeholder{font-weight:500;font-size:25px;color:#486958;padding:10px 0}.last-section .form-item textarea::placeholder{font-weight:500;font-size:25px;color:#486958;padding:10px 0}@media (max-width:1023px){.last-section .form-item textarea::-webkit-input-placeholder{font-size:20px}.last-section .form-item textarea:-ms-input-placeholder{font-size:20px}.last-section .form-item textarea::-ms-input-placeholder{font-size:20px}.last-section .form-item textarea::placeholder{font-size:20px}}.last-section .btn{border-radius:20px 20px 20px 0}body{display:flex;flex-direction:column;justify-content:space-between;min-height:100vh}#wrapper{position:relative;flex-grow:1;padding:250px 0 0}@media (max-width:1399px){.last-section .btn{border-radius:5px}#wrapper{padding:150px 0 0}}.container{max-width:1642px;padding:0 15px;margin:0 auto;justify-content:space-between}.btn{display:inline-block;text-align:center;min-width:271px;font-weight:500;font-size:25px;line-height:1.52;color:#fff;background:#58a9a5;padding:21px 30px}@media (max-width:1399px){.btn{font-size:18px;padding:10px 20px;min-width:160px;line-height:1.2}}p{line-height:1.5;color:#404242;margin:0 0 50px}@media (max-width:1023px){p{line-height:1.2;margin:0 0 30px}}#header{background:#fff;width:100%;position:fixed;top:0;left:0;z-index:10}#header .container{display:flex;align-items:center;padding:85px 30px 15px}#header .logo .logo-holder,#header .logo .logo-text,#header .logo a{display:inline-block;vertical-align:top}@media (max-width:1399px){p{font-size:20px;margin:0 0 30px}#header .container{padding:30px 15px}}#header .logo{white-space:nowrap;margin:0 140px 0 0}@media (max-width:1399px){#header .logo{margin:0 50px 0 0}}#header .logo .logo-holder{width:42px;height:50px}#header .logo .logo-holder img{height:100%}#header .logo .logo-text{font-weight:800;font-size:35px;line-height:1.48;color:#58a9a5;padding:0 0 0 10px}#header .btn-small,#header .menu a{line-height:1.52;text-decoration:none}@media (max-width:1023px){#header #nav{position:absolute;top:-250vh;left:0;width:100%;height:100vh;padding:40px;background:#58a9a5;transition:all .5s;text-align:center}#header #nav .menu{display:block}#header #nav li{margin:0 0 40px}#header #nav a{font-size:30px}}#header .menu{display:flex;list-style:none}#header .menu a{position:relative;color:#404242;font-weight:400;font-size:25px;white-space:nowrap;transition:all .2s}@media (max-width:1399px){#header .menu a{font-size:18px}#header .menu a:hover::after{position:absolute;bottom:-4px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);width:35px;height:4px;background:#fec62d;border-radius:21px}}#header .menu a:hover{font-weight:700;color:#58a9a5}#header .menu a:hover::after{content:"";position:absolute;bottom:-8px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);width:48px;height:6px;background:#fec62d;border-radius:21px}#header .menu li{padding:3px 86px 3px 0}#header .btn{border-radius:15px}@media (max-width:1399px){#header .menu li{padding:0 40px 0 0}#header .btn{border-radius:5px}}@media (max-width:1023px){#header .btn{display:none}}#header .btn-small{position:absolute;right:60px;display:block;align-items:start;text-align:center;width:45px;font-weight:45px;border-radius:50%;font-size:30px;color:#fff;background:#58a9a5}.nav-opener{width:36px;height:36px;position:relative;border-radius:3px;text-indent:-9999px;margin:6px 0 4px 10px;z-index:4}@media (min-width:1024px){#header .btn-small,.nav-opener{display:none}}.nav-opener span,.nav-opener:after,.nav-opener:before{background:#58a9a5;border-radius:4px;position:absolute;top:16px;left:10%;right:10%;height:3px;margin-top:-2px;transition:all .2s linear}.nav-opener:after,.nav-opener:before{content:"";top:10px}.nav-opener:after{top:22px}.nav-opener:hover{opacity:.9}.nav-active #nav{top:0!important}.nav-active #nav a,.nav-active #nav a:hover{color:#fff}.nav-active .btn-small{display:none}.nav-active .nav-opener span{opacity:0}.nav-active .nav-opener:after,.nav-active .nav-opener:before{-webkit-transform:rotate(45deg);transform:rotate(45deg);top:16px!important;left:15%;right:15%;background-color:#fff}.nav-active .nav-opener:after{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.top-section{margin:0 0 120px}.top-section .two-colums{display:flex;align-items:flex-start;flex-wrap:wrap}.top-section .left-columns{width:50%;padding:0 35px 0 0}@media (max-width:1023px){.top-section .left-columns{width:100%}.top-section .right-column .img-holder{display:none}}.top-section .right-column{width:50%;padding:0 0 0 35px}.top-section .right-column .img-holder{flex-shrink:0;background:url(../img/bg-img-1.svg) center/100% auto no-repeat}.top-section h1{line-height:1.5;-webkit-columns:#1c2323;columns:#1c2323;margin:0 0 50px}@media (max-width:1399px){.top-section h1{font-size:50px;color:#1c2323;margin:0 0 30px}}@media (max-width:1023px){.top-section h1{font-size:40px;line-height:1.2;color:#1c2323;margin:0 0 20px}}.top-section .btn{border-radius:20px 20px 20px 0}@media (max-width:1399px){.top-section .btn{border-radius:5px 5px 5px 0}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
